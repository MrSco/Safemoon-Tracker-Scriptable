{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "teal",
    "glyph" : "user-astronaut"
  },
  "name" : "Token Tracker",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: teal; icon-glyph: user-astronaut;\nlet widgetParams = (args.widgetParameter || '').split('|')\nlet shortcutParams = (args.shortcutParameter || '').split('|')\nconst settings = {\n  BSCSCAN_API_KEY: shortcutParams[0] || widgetParams[0] || 'C524VST55HHQZN4A614DZB515D8P1PW86X', \/\/ WAP default bscscan account api key\n  WALLET_ADDRESS: shortcutParams[1] || widgetParams[1] || '0x8c128dba2cb66399341aa877315be1054be75da8', \/\/ top safemoon holder default wallet address\n  CONTRACT_ADDRESS: shortcutParams[2] || widgetParams[2] || '0x8076c74c5e3f5852037f31ff0093eeb8c8add8d3', \/\/ SAFEMOON default contract address\n  TOKEN_DECIMALS: shortcutParams[3] || widgetParams[3] || 9, \/\/SAFEMOON default decimals\n  BSCSCAN_API_URL: 'https:\/\/api.bscscan.com\/api?module=account&action=tokenbalance&contractaddress={0}&address={1}&tag=latest&apikey={2}',\n  BSCSCAN_URL: 'https:\/\/bscscan.com\/token\/',\n  CHART_API_URL: 'https:\/\/quickchart.io\/chart?',\n  CHART_URL: 'https:\/\/poocoin.app\/tokens\/',\n  DEFAULT_TOKEN_IMG: 'https:\/\/raw.githubusercontent.com\/MrSco\/Safemoon-Tracker-Scriptable\/main\/bsc-logo.png',  \n  DEFAULT_TOKEN_HOMEPAGE: 'https:\/\/safemoon.net',\n  COIN_GECKO_API_URL: 'https:\/\/api.coingecko.com\/api\/v3\/coins\/binance-smart-chain\/contract\/{0}',\n  CHART_WIDTH: 300,\n  CHART_HEIGHT: 50,\n  TOKEN_LOGO_WIDTH: 35,\n  TOKEN_LOGO_HEIGHT: 35\n};\nconst decimalFactor = \"0.\".padEnd(settings.TOKEN_DECIMALS, 0) + \"01\";\n\n\/\/ ************************************\n\/\/ execute widget\nlet widget = await createWidget()\nif (config.runsInWidget) {\n  Script.setWidget(widget)\n} else {\n  widget.presentMedium()\n}\n\nconst SHORTCUTNAME = \"Refresh All Widgets\";\nconst BASEURL = \"shortcuts:\/\/run-shortcut?name=\";\nSafari.open(BASEURL + encodeURI(SHORTCUTNAME));\nScript.complete()\n\/\/ ************************************\nasync function createWidget() {\n  \/\/ declare widget\n  let w = new ListWidget()\n  \/\/w.setPadding(5,5,5,5)\n  \/\/ call async request to fetch wallet amount\n  let tokenInfo = await getBalance()\n  let balance = tokenInfo.balance\n  let walletBalance = tokenInfo.walletBalance\n  let price = tokenInfo.last\n  let percentChange = tokenInfo.percentChange\n  \/\/console.log(tokenInfo)\n  \/\/background color\n  w.backgroundColor = new Color('#000000')\n  \/\/ **************************************\n  \/\/ MAIN CONTAINER\n  let mainContainerStack = w.addStack()\n  mainContainerStack.layoutVertically()\n\n  \/\/ CHART IMAGE\n  const chartStack = mainContainerStack.addStack()\n  chartStack.centerAlignContent()\n  const chartUrl = encodeURI(await GetCoinGeckoChartURL(percentChange));\n  \/\/console.log(chartUrl);\n  if (chartUrl) {\n    const chartImgReq = new Request(chartUrl)\n    const chartImage = chartStack.addImage(await chartImgReq.loadImage())\n    chartImage.imageSize = new Size(settings.CHART_WIDTH, settings.CHART_HEIGHT-15)\n    chartImage.url = settings.CHART_URL + settings.CONTRACT_ADDRESS  \n  }\n  else {\n    chartStack.addText('chart error')\n  }\n  \/\/ Large Wallet Bal\n  let largeFont = Font.title2()\n  const largeBalanceStack = mainContainerStack.addStack()\n  let formattedBalance = formatNumber(walletBalance.toString().split('.')[0]) + '.' + walletBalance.toString().split('.')[1]\n  const largeBalance = largeBalanceStack.addText(formattedBalance)\n  largeBalance.font = largeFont\n  largeBalance.textColor = new Color('#ffffff')\n\n  \/\/ Small Price\n  let smallFont = Font.body(8)\n  const smallPriceStack = mainContainerStack.addStack()\n  const smallPrice = smallPriceStack.addText('@ ' + (price).toString())\n  smallPrice.font = smallFont\n  smallPrice.textColor = new Color('#ffffff')\n\n  \/\/ Small Percent\n  let changeIsUp = percentChange > 0\n  percentChange = (percentChange * (changeIsUp ? 1 : -1)).toString()\n  const smallPercent = smallPriceStack.addText((changeIsUp ? ' ▲' : ' ▼') + ' (' + percentChange + '%)')\n  smallPercent.font = smallFont\n  smallPercent.textColor = (changeIsUp ? Color.green() : Color.red()) \n  let now = Date.now()   \n\n  \/\/ Small Bal\n  const smallBalanceStack = mainContainerStack.addStack()\n  const smallBalance = smallBalanceStack.addText('$' + formatNumber(balance))\n  smallBalance.font = Font.title2()\n  smallBalance.textColor = new Color('#ffffff')\n\n  \/\/ Smaller last update\n  const bottomRowStack = mainContainerStack.addStack()\n  const bottomRowLeftStack = bottomRowStack.addStack()\n  bottomRowLeftStack.layoutVertically()\n  bottomRowLeftStack.size = new Size(285, 0)\n  const tokenNameStack = bottomRowLeftStack.addStack()\n  tokenNameStack.centerAlignContent()\n  const tokenName = tokenNameStack.addText(tokenInfo.tokenName)\n  tokenName.font = Font.body(8)\n  tokenName.textColor = new Color('#ffffff')\n  const tokenSymbol = tokenNameStack.addText(' ('+tokenInfo.tokenSymbol.toUpperCase()+')')\n  tokenSymbol.font = Font.caption1()\n  tokenSymbol.textColor = Color.gray()\n  const smallUpdatedStack = bottomRowLeftStack.addStack()\n  const smallUpdated = smallUpdatedStack.addText('Updated: ' + formatDate(new Date(now)))\n  smallUpdated.font = Font.caption2()\n  smallUpdated.textColor = Color.gray()\n    \n  \/\/ TOKEN IMAGE\n  const bottomRowRightStack = bottomRowStack.addStack()\n  const tokenImgUrl = tokenInfo.tokenImgUrl ? tokenInfo.tokenImgUrl : settings.DEFAULT_TOKEN_IMG  \n  \n  const imgReq = new Request(tokenImgUrl);\n  const tokenImg = await imgReq.loadImage();\n  const tokenImageStack = bottomRowRightStack.addStack()\n  let tokenImage = tokenImageStack.addImage(tokenImg);\n  tokenImage.imageSize = new Size(settings.TOKEN_LOGO_WIDTH, settings.TOKEN_LOGO_HEIGHT)\n  tokenImage.url = tokenInfo.homepage || settings.DEFAULT_TOKEN_HOMEPAGE;\n\n  \/\/ **************************************\n  \/\/refresh widget automatically\n  let nextRefresh = now + 1000\n  w.refreshAfterDate = new Date(nextRefresh)\n  showGradientBackground(w)\n  return w\n}\nfunction showGradientBackground(widget) {\n  let gradient = new LinearGradient()\n  gradient.colors = [new Color('#0a0a0a'), new Color('#141414'), new Color('#1f1f1f')]\n  gradient.locations = [0,0.8,1]\n  widget.backgroundGradient = gradient\n}\n\nasync function getBSCPrice() {\n  let ticker = {};\n  let coinGeckoApiUrl = settings.COIN_GECKO_API_URL.replace('{0}', settings.CONTRACT_ADDRESS);\n  let requestUrl = coinGeckoApiUrl;\n  try {\n    let request = new Request(requestUrl)\n    request.method = 'get';\n    ticker = await request.loadJSON()\n    \/\/console.log(ticker);\n  } catch (e) {\n    console.log(e)\n  }\n  return ticker;\n}\n\nasync function getKline() {\n  let kline = {};\n  let coinGeckoApiUrl = settings.COIN_GECKO_API_URL.replace('{0}', settings.CONTRACT_ADDRESS);\n  let to = parseInt(Date.now()\/1000)\n  let from = to-(3600*24) \/\/ 24 hours ago\n  let requestUrl = `${coinGeckoApiUrl}\/market_chart\/range?vs_currency=usd&from=${from}&to=${to}`\n  try {\n    let request = new Request(requestUrl)\n    request.method = 'get';\n    kline = await request.loadJSON()\nconsole.log(requestUrl);\n\/\/     console.log(kline);\n  } catch (e) {\n    console.log(e)\n  }\n  return kline;\n}\n\nasync function getBSCWallet(contract, walletAddress) {\n  let wallet = {}\n  let requestUrl = settings.BSCSCAN_API_URL\n    .replace('{0}', contract)\n    .replace('{1}', walletAddress)\n    .replace('{2}', settings.BSCSCAN_API_KEY);\n  console.log(requestUrl);\n  try {\n    let request = new Request(requestUrl)\n    request.method = \"get\";\n    wallet = await request.loadJSON()\n    \/\/console.log(wallet)\n  } catch (e) {\n       console.log(e)\n  }\n  return wallet\n}\n\nasync function getBalance() {\n  let wallet = await getBSCWallet(settings.CONTRACT_ADDRESS, settings.WALLET_ADDRESS)  \n  let ticker = await getBSCPrice()\n  let currentPrice = parseFloat(ticker?.market_data?.current_price?.usd || 0)\n  let tokenBalance = (wallet?.result || 0)\n  let walletBalance = (tokenBalance*decimalFactor).toFixed(2)\n  let balance = {\n      tokenName: ticker?.name || '?',\n      tokenSymbol: ticker?.symbol || '?',\n      balance: (walletBalance * currentPrice).toFixed(2),\n      last: currentPrice.toFixed(numberOfDecimals(currentPrice)),\n      tokenImgUrl: ticker?.image?.small || '',\n      walletBalance: walletBalance,\n      homepage: ticker?.links?.homepage[0] || ticker?.links?.homepage[1] || ticker?.links?.homepage[2] || '',\n      percentChange: (ticker?.market_data?.price_change_percentage_24h || 0).toFixed(2)\n    }\n  return balance\n}\n\nfunction formatNumber(num) {\n  return num.toString().replace(\/(\\d)(?=(\\d{3})+(?!\\d))\/g, '$1,')\n}\n\nfunction formatDate(date) {\n  const dF = new DateFormatter()\n  dF.dateFormat = 'MM\/dd\/yy h:mm:ss a'\n  return dF.string(date)\n}\n\n\nasync function GetCoinGeckoChartURL(percentChange) {\n  let kline = await getKline();\n  let data = kline.prices || []\n  let x = [];\n  let y = [];\n  let baseline = [];\n  let min = 0\n  let max = 0;\n  if (!data) return '';\n  for (var i=0; i<data.length; i++) {\n    if (i % 2) continue;\n    var p = data[i];\n    var d = new Date(parseInt(p[0])).toLocaleDateString(\"en-US\");\n    var t = new Date(parseInt(p[0])).toLocaleTimeString(\"en-US\");\n    x.push(d+' '+t);\n    y.push(parseFloat(p[1]));\n    baseline.push(parseFloat(data[0][1]));\n  }\n  min = Math.min(...y)\n  max = Math.max(...y)\n\n  let chartJson = {\n      \"type\": \"line\",\n      \"data\":\n      {\n      \"labels\": \"\",\n      \"datasets\": [\n          {\n          \"borderColor\": \"\",\n          \"data\": \"\",\n          \"fill\": 0\n          },\n          {\n          \"backgroundColor\": \"transparent\",\n          \"borderWidth\": 3,\n          \"borderDash\": [1, 10],\n          \"borderColor\": \"lightgray\",\n          \"data\": \"\"\n          }\n      ]\n      },\n      \"options\":\n      {\n      \"responsive\": 1,\n      \"title\":\n      {\n          \"display\": 0\n      },\n      \"legend\":\n      {\n          \"display\": 0\n      },\n      \"elements\":\n      {\n          \"point\":\n          {\n          \"radius\": 0\n          }\n      },\n      \"scales\":\n      {\n          \"xAxes\": [\n          {\n          \"scaleLabel\": {\n          \"display\": 0\n          },\n          \"gridLines\": {\n          \"display\": 0\n          },\n          \"ticks\":\n          {\n              \"display\": 0\n          }\n          }],\n          \"yAxes\": [\n          {\n          \"display\": 0,\n          \"ticks\":\n          {          \n              \"min\": \"\",\n              \"max\": \"\"\n          }\n          }]\n      }\n      }\n  };\n  chartJson.data.labels = x\n  chartJson.data.datasets[0].borderColor = percentChange > 0 ? 'green' : 'red'\n  chartJson.data.datasets[0].data = y\n  chartJson.data.datasets[1].data = baseline\n  chartJson.options.scales.yAxes[0].ticks.min = min\n  chartJson.options.scales.yAxes[0].ticks.max = max\n  let chartUrl = settings.CHART_API_URL + `w=${settings.CHART_WIDTH}&h=${settings.CHART_HEIGHT}&c=` + JSON.stringify(chartJson)\n  return chartUrl\n}\n\nfunction numberOfDecimals(num) {\n  let d = 10;\n  if (num > .001)\n    d = 6\n  if (num > .1)\n    d = 3\n  if (num > 1)\n    d = 2\n  return d\n};",
  "share_sheet_inputs" : [

  ]
}