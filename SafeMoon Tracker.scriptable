{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "teal",
    "glyph" : "user-astronaut"
  },
  "name" : "SafeMoon Tracker",
  "script" : "let widgetParams = (args.widgetParameter || '').split('|')\nlet friendlyName = 'SafeMoon'\nconst settings = {\n  BSCSCAN_API_KEY: widgetParams[0] || 'C524VST55HHQZN4A614DZB515D8P1PW86X', \/\/ WAP bscscan account api key\n  WALLET_ADDRESS: widgetParams[1] || '0x8c128dba2cb66399341aa877315be1054be75da8',\n  WIDGET_URL: 'https:\/\/safemoon.net',\n  LOGO_URL: 'https:\/\/safemoon.net\/img\/174x174.png',\n  FRIENDLY_NAME: friendlyName,\n  CURRENCY_PAIR: (friendlyName).toUpperCase() + '_USDT',\n  CONTRACT_ADDRESS: '0x8076c74c5e3f5852037f31ff0093eeb8c8add8d3',\n  TICKER_API_URL: 'https:\/\/data.gateio.life\/api2\/1\/ticker',\n  BSCSCAN_API_URL: 'https:\/\/api.bscscan.com\/api?module=account&action=tokenbalance&contractaddress={0}&address={1}&tag=latest&apikey={2}',\n  PRICE_FACTOR: 0.000000001\n};\nconst imgReq = new Request(settings.LOGO_URL)\nconst tokenImg = await imgReq.loadImage()\n\/\/ ************************************\n\/\/ execute widget\nlet widget = await createWidget()\nif (config.runsInWidget) {\n  Script.setWidget(widget)\n} else {\n  widget.presentMedium()\n}\nScript.complete()\n\/\/ ************************************\nasync function createWidget() {\n  \/\/ declare widget\n  let w = new ListWidget()\n  \/\/ call async request to fetch wallet amount\n  let tokenInfo = await getBalance()\n  let balance = tokenInfo['balance']\n  let walletBalance = tokenInfo['walletBalance'].toFixed(4)\n  let price = tokenInfo['last']\n  let percentChange = tokenInfo['percentChange']\n  \/\/background color\n  w.backgroundColor = new Color('#000000')\n  \/\/ **************************************\n  \/\/ MAIN CONTAINER\n  let mainContainerStack = w.addStack()\n  \/\/ TOP CONTAINER\n  let leftContainerStack = mainContainerStack.addStack()\n  leftContainerStack.layoutVertically()\n  leftContainerStack.size = new Size(275, 150)\n  \/\/ TOP RIGHT STACK\n  let rightContainerStack = mainContainerStack.addStack()\n  rightContainerStack.size = new Size(40, 140)\n  rightContainerStack.bottomAlignContent()\n  \/\/ TOP LEFT STACK:\n  \/\/ **************************************\n  \/\/ Larger Name\n  let largerFont = Font.title1()\n  const largeNameStack = leftContainerStack.addStack()\n  const largeName = largeNameStack.addText(settings.FRIENDLY_NAME)\n  largeName.font = largerFont\n  largeName.textColor = new Color('#ffffff')\n  \/\/ TOKEN IMAGE\n  const headerImageStack = rightContainerStack.addStack()\n  let tokenImage = headerImageStack.addImage(tokenImg)\n  tokenImage.imageSize = new Size(40, 40)\n  tokenImage.url = settings.WIDGET_URL\n  \/\/ Large Wallet Bal\n  let largeFont = Font.title2()\n  const largeBalanceStack = leftContainerStack.addStack()\n  let formattedBalance = formatNumber(walletBalance.toString().split('.')[0]) + '.' + walletBalance.toString().split('.')[1]\n  const largeBalance = largeBalanceStack.addText(formattedBalance)\n  largeBalance.font = largeFont\n  largeBalance.textColor = new Color('#ffffff')\n  \/\/ BOTTOM LEFT STACK:\n  \/\/ **************************************\n  \/\/ Small Price\n  let smallFont = Font.body()\n  const smallPriceStack = leftContainerStack.addStack()\n  const smallPrice = smallPriceStack.addText('@ ' + (price).toString())\n  smallPrice.font = smallFont\n  smallPrice.textColor = new Color('#ffffff')\n  \/\/ Small Bal\n  const smallBalanceStack = leftContainerStack.addStack()\n  const smallBalance = smallBalanceStack.addText('$' + formatNumber(balance))\n  smallBalance.font = Font.title2()\n  smallBalance.textColor = new Color('#ffffff')\n  \/\/ Small Percent\n  let changeIsUp = percentChange > 0\n  percentChange = (percentChange * (changeIsUp ? 1 : -1)).toString()\n  const smallPercent = smallPriceStack.addText((changeIsUp ? ' ▲' : ' ▼') + ' (' + percentChange + '%)')\n  smallPercent.font = smallFont\n  smallPercent.textColor = (changeIsUp ? Color.green() : Color.red()) \n  let now = Date.now()   \n  \/\/ Smaller last update\n  const smallUpdated = leftContainerStack.addText('Updated: ' + formatDate(new Date(now)))\n  smallUpdated.font = Font.caption2()\n  smallUpdated.textColor = Color.gray()\n  \/\/ **************************************\n  \/\/refresh widget automatically\n  let nextRefresh = now + 1000\n  w.refreshAfterDate = new Date(nextRefresh)\n  showGradientBackground(w)\n  return w\n}\nfunction showGradientBackground(widget) {\n  let gradient = new LinearGradient()\n  gradient.colors = [new Color('#0a0a0a'), new Color('#141414'), new Color('#1f1f1f')]\n  gradient.locations = [0,0.8,1]\n  widget.backgroundGradient = gradient\n}\n\nasync function getBSCPrice(pair) {\n  let ticker = {};\n  let requestUrl = settings.TICKER_API_URL + '\/' + pair;\n  try {\n    let request = new Request(requestUrl)\n    request.method = 'get';\n    ticker = await request.loadJSON()\n  } catch (e) {\n    console.log(e)\n  }\n  return ticker;\n}\n\nasync function getBSCWallet(contract, walletAddress) {\n  let requestUrl = settings.BSCSCAN_API_URL\n    .replace('{0}', contract)\n    .replace('{1}', walletAddress)\n    .replace('{2}', settings.BSCSCAN_API_KEY);\n  let walletBalance = 0;\n  try {\n    let request = new Request(requestUrl)\n    request.method = \"get\";\n    let response = await request.loadJSON()\n    walletBalance = parseFloat(response['result']) * settings.PRICE_FACTOR\n  } catch (e) {\n       console.log(e)\n  }\n  return walletBalance\n}\n\nasync function getBalance() {\n  let walletBalance = await getBSCWallet(settings.CONTRACT_ADDRESS, settings.WALLET_ADDRESS)\n  let ticker = await getBSCPrice(settings.CURRENCY_PAIR)\n  let balance = {\n      balance: (walletBalance * ticker['last']).toFixed(2),\n      last: ticker['last'],\n      walletBalance: walletBalance,\n      percentChange: ticker['percentChange']\n    }\n  return balance\n}\n\nfunction formatNumber(num) {\n  return num.toString().replace(\/(\\d)(?=(\\d{3})+(?!\\d))\/g, '$1,')\n}\n\nfunction formatDate(date) {\n  const dF = new DateFormatter()\n  dF.dateFormat = 'MM\/dd\/yy h:mm:ss a'\n  return dF.string(date)\n}",
  "share_sheet_inputs" : [

  ]
}
